import Head from "next/head";
import Image from "next/image";
import styles from "../../styles/Home.module.css";
import Header from "../../src/components/Header";
import Footer from "../../src/components/Footer";
import MainTitle from "../../src/components/MainTitle";
import Card from "../../src/components/Card";
import Bascet from "../../src/components/Bascet"
import { useState, useEffect } from "react";

export default function Home() {
 

  return (
    <div className={styles.container}>
      <Head>
        <title>Order Bruce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header/>
      <Bascet/>
      <Footer />
    </div>
  );
}

/*
  const date = new Date();
  const api_key = "B4DQRI1Ab1o6heEM4WLk5arHlmHMpgcNil3e83Qp";
  const url = `https://api.nasa.gov/neo/rest/v1/feed?start_date=${date.toLocaleDateString("en-ca")}&end_date=${date.addDays(7).toLocaleDateString("en-ca")}&api_key=`;
  const [link, setLink] = useState("");
  const [cards, setCards] = useState([]);
  useEffect(() => {
    document.addEventListener("scroll", scrollHandler);
    return function () {
      document.removeEventListener("scroll", scrollHandler);
    };
  });
  useEffect(() => {
    (async () => {
      let asteroids = [];
      const link = await fetch(`${url}${api_key}`)
        .then((res) => res.json())
        .then((res) => {
          console.log('res',res);
          let date = new Date();
          let date2 = date.addDays(7);
          console.log(date2);
          let nearEarthObjects = res.near_earth_objects;
          let j = 0;
          for(let j=0;j<7;j++){
            for (let i = 0; i < nearEarthObjects[date.addDays(j).toLocaleDateString("en-ca")].length; i++) {
              let obj = nearEarthObjects[date.addDays(j).toLocaleDateString("en-ca")][i];
              let lunarDistance = obj.close_approach_data[0].miss_distance.lunar;
              let kilometers =
                obj.close_approach_data[0].miss_distance.kilometers;
              let card__danger = obj.is_potentially_hazardous_asteroid;
              let diameter = obj.absolute_magnitude_h;
              asteroids.push({
                date: `${date.addDays(j).toLocaleDateString("en-ca")}`,
                id: `${obj.id}`,
                name: `Астероид ${obj.name}`,
                lunarDistance: parseInt(lunarDistance),
                absoluteMag: diameter,
                danger: card__danger,
                kilometers: formatNumber(parseInt(kilometers)),
              });
            }
          }
            



          setCards(asteroids);
        });
    })();
  }, []);
*/

/* fetch(`${url}${api_key}`)
    .then((res) => {
      console.log(res);
      return res.json();
    })
    .then((res) => {
      let date = new Date().toLocaleDateString("en-ca");
      let nearEarthObjects = res.near_earth_objects;
      for (let i = 0; i < nearEarthObjects[date].length; i++) {
        let obj = nearEarthObjects[date][i];
        let lunarDistance = obj.close_approach_data[0].miss_distance.lunar;
        let kilometers = obj.close_approach_data[0].miss_distance.kilometers;
        let card__danger = obj.is_potentially_hazardous_asteroid;
        let diameter = obj.absolute_magnitude_h;
        /*setCards([
          ...cards,
          {
            name: `Астероид ${obj.name}`,
            lunarDistance: parseInt(lunarDistance),
            absoluteMag: diameter,
            danger: card__danger,
            kilometers: formatNumber(parseInt(kilometers)),
          },
        ]);
        asteroids.push({
          name: `Астероид ${obj.name}`,
          lunarDistance: parseInt(lunarDistance),
          absoluteMag: diameter,
          danger: card__danger,
          kilometers: formatNumber(parseInt(kilometers)),
        });
      }
      console.log(asteroids);
      setCards([asteroids]);
      console.log("cards", cards);
    });*/
